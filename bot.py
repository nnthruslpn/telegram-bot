import json
import logging
from datetime import datetime, timedelta
from telebot import TeleBot, types
from apscheduler.schedulers.background import BackgroundScheduler
from config import SENDER_USER_IDS, RECEIVER_USER_IDS, INFO_CHAT_ID
import os
from dotenv import load_dotenv
load_dotenv()
TOKEN = os.getenv("TOKEN")

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

bot = TeleBot(TOKEN)
scheduler = BackgroundScheduler()
scheduler.start()

TASK_FIELDS = [
    ('client_name', "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"),
    ('urgency', "–°—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏"),
    ('what_to_do', "–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å"),
    ('goal', "–¶–µ–ª—å —Ä–∞–±–æ—Ç—ã"),
    ('client_pp', "–ü–ü –∫–ª–∏–µ–Ω—Ç–∞"),
    ('equipment', "–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å)"),
    ('cost_and_hours', "–°—É–º–º–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"),
    ('contact_person', "–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ (–§–ò–û –∏ –Ω–æ–º–µ—Ä–∞)"),
    ('photo', "–§–æ—Ç–æ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ)")
]

STATUS_MAP = {
    'take': '–≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É',
    'no_competence': '–Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è',
    'cant_take': '–Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É'
}

ICON_COLOR = 7322096
MAX_TOPIC_LENGTH = 20


class TaskManager:
    def __init__(self):
        self.tasks = {}
        self.pending_tasks = {}
        self.threads = {}  # –•—Ä–∞–Ω–∏—Ç task_number: thread_id
        self.message_ids = {}  # –•—Ä–∞–Ω–∏—Ç task_number: message_id
        self._load_state()

    def _load_state(self):
        try:
            with open('task_state.json', 'r') as f:
                data = json.load(f)
                self.task_counter = data.get('task_counter', 1)
                self.tasks = {int(k): v for k, v in data.get(
                    'tasks', {}).items()}
                self.threads = {int(k): v for k, v in data.get(
                    'threads', {}).items()}
                self.message_ids = {int(k): v for k, v in data.get(
                    'message_ids', {}).items()}
                self.pending_tasks = {int(k): v for k, v in data.get(
                    'pending_tasks', {}).items()}

                logger.info(
                    f"State loaded successfully. Tasks: {len(self.tasks)}, Threads: {len(self.threads)}, Messages: {len(self.message_ids)}")

        except FileNotFoundError:
            logger.info("State file not found. Starting fresh.")
            self.task_counter = 1
        except Exception as e:
            logger.error(f"Error loading state: {e}")
            self.task_counter = 1

    def update_forum_message(self, task_number):
        task_data = self.tasks[task_number]
        try:
            thread_id = self.threads[task_number]
            message_id = self.message_ids[task_number]
            
            if task_data.get('photo'):
                bot.edit_message_caption(
                    chat_id=INFO_CHAT_ID,
                    message_id=message_id,
                    caption=self.generate_task_message(task_number, task_data, with_status=True),
                    parse_mode="Markdown",
                    reply_markup=self.generate_task_controls(task_number, task_data['is_resolved'])
                )
            else:
                bot.edit_message_text(
                    chat_id=INFO_CHAT_ID,
                    message_id=message_id,
                    text=self.generate_task_message(task_number, task_data, with_status=True),
                    parse_mode="Markdown",
                    reply_markup=self.generate_task_controls(task_number, task_data['is_resolved'])
                )
        except Exception as e:
            logger.error(f"Error updating forum message: {e}")

    def update_main_chat_status(self, task_number):
        task_data = self.tasks[task_number]
        try:
            if 'main_chat_message_id' in task_data:
                if task_data.get('photo'):
                    bot.edit_message_caption(
                        chat_id=INFO_CHAT_ID,
                        message_id=task_data['main_chat_message_id'],
                        caption=self.generate_task_message(task_number, task_data, with_status=True),
                        parse_mode="Markdown"
                    )
                else:
                    bot.edit_message_text(
                        chat_id=INFO_CHAT_ID,
                        message_id=task_data['main_chat_message_id'],
                        text=self.generate_task_message(task_number, task_data, with_status=True),
                        parse_mode="Markdown"
                    )
        except Exception as e:
            logger.error(f"Error updating main chat: {e}")

    def save_state(self):
        data = {
            'task_counter': self.task_counter,
            'tasks': self.tasks,
            'threads': self.threads,
            'message_ids': self.message_ids,
            'pending_tasks': self.pending_tasks
        }
        try:
            with open('task_state.json', 'w') as f:
                json.dump(data, f, indent=4, ensure_ascii=False)
            logger.info("State saved successfully.")
        except Exception as e:
            logger.error(f"Error saving state: {e}")

    def create_task(self, chat_id):
        self.pending_tasks[chat_id] = {field: None for field, _ in TASK_FIELDS}
        return self.pending_tasks[chat_id]

    def get_next_field(self, task_data):
        for field, _ in TASK_FIELDS:
            if task_data[field] is None:
                return field
        return None

    def finalize_task(self, chat_id, task_data):
        try:
            user = bot.get_chat(chat_id)
            sender_name = f"{user.first_name}"
            if user.last_name:
                sender_name += f" {user.last_name}"
        except Exception as e:
            logger.error(f"Error getting sender info: {e}")
            sender_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å"

        task_number = self.task_counter
        task_data.update({
            'sender_name': sender_name,
            'status': {},
            'responded_users': [],
            'is_resolved': False,
            'sender_id': chat_id
        })
        
        self.tasks[task_number] = task_data
        self.task_counter += 1

        try:
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç
            if task_data.get('photo'):
                main_msg = bot.send_photo(
                    INFO_CHAT_ID,
                    task_data['photo'],
                    caption=self.generate_task_message(task_number, task_data, with_status=False),
                    parse_mode="Markdown"
                )
            else:
                main_msg = bot.send_message(
                    INFO_CHAT_ID,
                    self.generate_task_message(task_number, task_data, with_status=False),
                    parse_mode="Markdown"
                )
            task_data['main_chat_message_id'] = main_msg.message_id

            # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–æ—Ä—É–º —Ç–æ–ø–∏–∫–∞
            topic_name = f"üî¥ {task_number} {task_data['client_name'][:MAX_TOPIC_LENGTH]}"
            forum_topic = bot.create_forum_topic(
                INFO_CHAT_ID, 
                topic_name, 
                icon_color=ICON_COLOR
            )
            thread_id = forum_topic.message_thread_id

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ñ–æ—Ä—É–º
            if task_data.get('photo'):
                forum_msg = bot.send_photo(
                    INFO_CHAT_ID,
                    task_data['photo'],
                    caption=self.generate_task_message(task_number, task_data, with_status=False),
                    parse_mode="Markdown",
                    message_thread_id=thread_id,
                    reply_markup=self.generate_task_controls(task_number, False)
                )
            else:
                forum_msg = bot.send_message(
                    INFO_CHAT_ID,
                    self.generate_task_message(task_number, task_data, with_status=False),
                    parse_mode="Markdown",
                    message_thread_id=thread_id,
                    reply_markup=self.generate_task_controls(task_number, False)
                )

            self.threads[task_number] = thread_id
            self.message_ids[task_number] = forum_msg.message_id

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º
            for receiver_id in RECEIVER_USER_IDS:
                try:
                    if task_data.get('photo'):
                        bot.send_photo(
                            receiver_id,
                            task_data['photo'],
                            caption=self.generate_task_message(task_number, task_data, with_status=False),
                            parse_mode="Markdown",
                            reply_markup=self.main_task_keyboard(task_number)
                        )
                    else:
                        bot.send_message(
                            receiver_id, 
                            self.generate_task_message(task_number, task_data, with_status=False),
                            parse_mode="Markdown",
                            reply_markup=self.main_task_keyboard(task_number)
                        )
                    scheduler.add_job(
                        send_reminder_to_user,
                        'date',
                        run_date=datetime.now() + timedelta(minutes=30),
                        args=[task_number, receiver_id]
                    )
                except Exception as e:
                    logger.error(f"Error sending to user {receiver_id}: {e}")

            scheduler.add_job(
                send_unanswered_notification,
                'date',
                run_date=datetime.now() + timedelta(minutes=60),
                args=[task_number]
            )

            del self.pending_tasks[chat_id]
            self.save_state()

            bot.send_message(
                chat_id,
                f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_number} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!",
                reply_markup=types.ReplyKeyboardRemove()
            )

        except Exception as e:
            logger.error(f"Error finalizing task: {e}")
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
            self.save_state()

    def generate_task_message(self, task_number, task_data, with_status=True):
        message = [
            f"*–ó–∞–¥–∞—á–∞ #{task_number}*",
            f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {task_data['sender_name']}",
            f"üìå –ö–ª–∏–µ–Ω—Ç: {task_data['client_name']}",
            f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {task_data['urgency']}",
            f"üìù –ó–∞–¥–∞—á–∞: {task_data['what_to_do']}",
            f"üéØ –¶–µ–ª—å: {task_data['goal']}",
            f"üìÑ –ü–ü –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_pp']}",
            f"‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {task_data['equipment']}",
            f"üí∞ –°—É–º–º–∞/—á–∞—Å—ã: {task_data['cost_and_hours']}",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã: {task_data['contact_person']}",
        ]

        if with_status and task_data.get('status'):
            message.append("\n*–°—Ç–∞—Ç—É—Å—ã –æ—Ç–≤–µ—Ç–æ–≤:*")
            message.extend(
                f"‚Ä¢ {user} ‚Äî {status}"
                for user, status in task_data['status'].items()
            )

        return "\n".join(message)

    def main_task_keyboard(self, task_number):
        return self.create_keyboard([
            [("–ë–µ—Ä—É –∑–∞–¥–∞—á—É", f"user_take:{task_number}")],
            [("–ù–µ —É–≤–µ—Ä–µ–Ω, –Ω—É–∂–Ω—ã —É—Ç–æ—á–Ω–µ–Ω–∏—è",
              f"user_no_competence:{task_number}")],
            [("–ù–µ –º–æ–≥—É –≤–∑—è—Ç—å", f"user_cant_take:{task_number}")]
        ])

    def generate_task_controls(self, task_number, is_resolved):
        if is_resolved:
            return self.create_keyboard([[("üî¥ –í–µ—Ä–Ω—É—Ç—å –≤ —Ä–∞–±–æ—Ç—É", f"forum_reopen:{task_number}")]])
        return self.create_keyboard([
            [("üü¢ –†–µ—à–µ–Ω–æ", f"forum_resolve:{task_number}")],
            [("üü° –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", f"forum_take:{task_number}")]
        ])

    @staticmethod
    def create_keyboard(buttons, row_width=1):
        keyboard = types.InlineKeyboardMarkup(row_width=row_width)
        for btn in buttons:
            if isinstance(btn, list):
                keyboard.add(
                    *[types.InlineKeyboardButton(text, callback_data=data) for text, data in btn])
            else:
                keyboard.add(types.InlineKeyboardButton(
                    btn[0], callback_data=btn[1]))
        return keyboard


task_manager = TaskManager()


def send_reminder_to_user(task_number, user_id):
    if task_number not in task_manager.tasks:
        return

    task_data = task_manager.tasks[task_number]
    if user_id in task_data.get('responded_users', []):
        return

    try:
        bot.send_message(
            user_id,
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –∑–∞–¥–∞—á—É #{task_number}.",
        )
    except Exception as e:
        logger.error(f"Error sending reminder to user {user_id}: {e}")


def send_unanswered_notification(task_number):
    if task_number not in task_manager.tasks:
        return

    task_data = task_manager.tasks[task_number]
    users_to_remind = [
        user_id for user_id in RECEIVER_USER_IDS
        if user_id not in task_data.get('responded_users', [])
    ]

    if not users_to_remind:
        return

    unanswered_users = []
    for user_id in users_to_remind:
        try:
            user = bot.get_chat_member(INFO_CHAT_ID, user_id).user
            user_name = f"{user.first_name} {user.last_name}" if user.last_name else user.first_name
            if user.username:
                user_name += f" (@{user.username})"
            unanswered_users.append(user_name)
        except Exception as e:
            logger.error(f"Error getting user info: {e}")

    if unanswered_users:
        message = (
            f"@aagutenev\n"
            f"–°–ª–µ–¥—É—é—â–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –Ω–µ –¥–∞–ª–∏ –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–¥–∞—á—É #{task_number} –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞:\n"
            f"{', '.join(unanswered_users)}"
        )
        bot.send_message(INFO_CHAT_ID, message)


def skip_step_keyboard():
    return task_manager.create_keyboard([("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥", "skip_step")])






def handle_media_message(message, task_data):
    if message.content_type == 'photo':
        return message.photo[-1].file_id
    return message.text if message.content_type == 'text' else None


@bot.message_handler(commands=['start'], chat_types=['private'])
def start_handler(message):
    if message.from_user.id in SENDER_USER_IDS:
        keyboard = types.ReplyKeyboardMarkup(
            resize_keyboard=True, one_time_keyboard=True)
        keyboard.add(types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"))
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.",
                         reply_markup=keyboard)
    else:
        bot.send_message(message.chat.id,
                         "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å –∑–∞–¥–∞—á–∏.",
                         reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(func=lambda m: m.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" and m.from_user.id in SENDER_USER_IDS)
def task_creation_handler(message):
    task = task_manager.create_task(message.chat.id)
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞.")


@bot.message_handler(content_types=['text', 'photo'], func=lambda m: m.from_user.id in SENDER_USER_IDS)
def process_task_data(message):
    chat_id = message.chat.id
    if chat_id not in task_manager.pending_tasks:
        return

    task_data = task_manager.pending_tasks[chat_id]
    current_field = task_manager.get_next_field(task_data)

    if not current_field:
        return

    task_data[current_field] = handle_media_message(message, task_data)
    next_field = task_manager.get_next_field(task_data)

    if next_field:
        prompt = TASK_FIELDS[[f[0] for f in TASK_FIELDS].index(next_field)][1]
        reply_markup = skip_step_keyboard() if next_field == 'photo' else None
        bot.send_message(
            chat_id, f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ {prompt}.", reply_markup=reply_markup)
    else:
        task_manager.finalize_task(chat_id, task_data)


@bot.callback_query_handler(func=lambda call: call.data.startswith(('forum_', 'user_', 'skip')))
def callback_handler(call):
    try:
        if call.data == "skip_step":
            handle_skip_step(call)
            return

        parts = call.data.split(':', 1)
        prefix_action = parts[0]
        task_number = int(parts[1]) if len(parts) > 1 else None

        if prefix_action.startswith('forum_'):
            action = prefix_action.split('_', 1)[1]
            handle_forum_action(call, action, task_number)
        elif prefix_action.startswith('user_'):
            action = prefix_action.split('_', 1)[1]
            handle_user_response(call, action, task_number)

    except Exception as e:
        logger.error(f"Callback error: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞")


def handle_skip_step(call):
    chat_id = call.message.chat.id
    if chat_id in task_manager.pending_tasks:
        task_data = task_manager.pending_tasks[chat_id]
        task_data['photo'] = None
        task_manager.finalize_task(chat_id, task_data)
        bot.answer_callback_query(call.id, "–®–∞–≥ —Å —Ñ–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω")
        bot.edit_message_reply_markup(
            chat_id, call.message.message_id, reply_markup=None)


def handle_forum_action(call, action, task_number):
    task_data = task_manager.tasks.get(task_number)
    if not task_data:
        return bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

    thread_id = task_manager.threads.get(task_number)
    if not thread_id:
        return bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ —Ç–æ–ø–∏–∫–∞!")

    try:
        new_name = ""
        if action == 'resolve':
            if task_data['is_resolved']:
                return bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–∂–µ —Ä–µ—à–µ–Ω–∞!")
            new_name = f"üü¢ {task_number} {task_data['client_name'][:MAX_TOPIC_LENGTH]}"
            task_data['is_resolved'] = True
            bot.close_forum_topic(INFO_CHAT_ID, thread_id)

        elif action == 'reopen':
            if not task_data['is_resolved']:
                return bot.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–∂–µ –æ—Ç–∫—Ä—ã—Ç–∞!")
            new_name = f"üî¥ {task_number} {task_data['client_name'][:MAX_TOPIC_LENGTH]}"
            task_data['is_resolved'] = False
            bot.reopen_forum_topic(INFO_CHAT_ID, thread_id)

        elif action == 'take':
            new_name = f"üü° {task_number} {task_data['client_name'][:MAX_TOPIC_LENGTH]}"
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏
            user_name = call.from_user.first_name
            if call.from_user.last_name:
                user_name += f" {call.from_user.last_name}"
            task_data.setdefault('status', {})[user_name] = STATUS_MAP['take']

        if new_name:
            bot.edit_forum_topic(
                INFO_CHAT_ID,
                thread_id,
                name=new_name
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        task_manager.update_forum_message(task_number)
        task_manager.save_state()

        bot.answer_callback_query(call.id, "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω!")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–º—ã: {e}")
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}")


def handle_user_response(call, action, task_number):
    task_data = task_manager.tasks[task_number]
    user_id = call.from_user.id
    user_name = f"{call.from_user.first_name} {call.from_user.last_name}" if call.from_user.last_name else call.from_user.first_name
    status = STATUS_MAP.get(action)

    if status:
        if user_id not in task_data['responded_users']:
            task_data['responded_users'].append(user_id)

        task_data['status'][user_name] = status
        task_manager.update_main_chat_status(task_number)

        try:
            bot.edit_message_reply_markup(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=None
            )
            bot.answer_callback_query(call.id, f"–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {status}")
        except Exception as e:
            logger.error(f"Error updating message: {e}")
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")


if __name__ == '__main__':
    logger.info("Starting bot...")
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        scheduler.shutdown()
        task_manager.save_state()
        logger.info("Bot stopped gracefully")