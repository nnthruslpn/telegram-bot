import logging
from telebot import TeleBot, types
from config import TOKEN, SENDER_USER_ID, RECEIVER_USER_ID, INFO_CHAT_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ config.py

bot = TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
task_counter = 1  # –ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏
task_status = {}  # –°—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á
created_threads = {}  # –í–µ—Ç–∫–∏ –∑–∞–¥–∞—á
message_ids_in_chat = {}  # ID —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å—Ç–∞—Ç—É—Å–∞–º–∏ –∑–∞–¥–∞—á
pending_tasks = {}  # –ó–∞–¥–∞—á–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–æ–¥–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_full_name(user):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    return f"{user.first_name} {user.last_name}" if user.last_name else user.first_name

def create_forum_topic(task_number, short_topic):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ–º—É –≤ —Ñ–æ—Ä—É–º–µ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π."""
    icon_color = 7322096  # –ó–∞–¥–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ü–≤–µ—Ç –∏–∫–æ–Ω–∫–∏
    try:
        response = bot.create_forum_topic(
            chat_id=INFO_CHAT_ID,
            name=f"{task_number}. {short_topic}",  # –ù–æ–º–µ—Ä + –∫—Ä–∞—Ç–∫–∞—è —Ç–µ–º–∞
            icon_color=icon_color
        )
        return response.message_thread_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–º—ã: {e}")
        return None

def send_message_to_forum_thread(message, thread_id, photo=None):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ (–∏ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å) –≤ —Ñ–æ—Ä—É–º–Ω—ã–π —Ç—Ä–µ–¥."""
    try:
        if photo:
            bot.send_photo(chat_id=INFO_CHAT_ID, photo=photo, caption=message, message_thread_id=thread_id)
        else:
            bot.send_message(chat_id=INFO_CHAT_ID, text=message, message_thread_id=thread_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç—Ä–µ–¥ —Ñ–æ—Ä—É–º–∞: {e}")

def send_task_status_update(task_number):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."""
    task_info = task_status[task_number]
    task_message = (
        f"*–ó–∞–¥–∞—á–∞ #{task_number}*\n"  # –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ —ç–º–æ–¥–∑–∏
        f"üìå {task_info['topic']}\n"
        f"üìù {task_info['description']}\n"
        f"–°—Ç–∞—Ç—É—Å—ã:\n"
    )

    for idx, (user, status_text) in enumerate(task_info['status'].items(), 1):
        task_message += f"{idx}. {user} ‚Äî {status_text}\n"  # –ö–∞–∂–¥—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ

    try:
        if task_number in message_ids_in_chat:
            if task_info.get('photo'):
                bot.edit_message_caption(
                    caption=task_message, chat_id=INFO_CHAT_ID,
                    message_id=message_ids_in_chat[task_number],
                    parse_mode="Markdown"
                )
            else:
                bot.edit_message_text(
                    task_message, chat_id=INFO_CHAT_ID,
                    message_id=message_ids_in_chat[task_number],
                    parse_mode="Markdown"
                )
        else:
            if task_info.get('photo'):
                sent_message = bot.send_photo(
                    INFO_CHAT_ID, photo=task_info['photo'], caption=task_message, parse_mode="Markdown"
                )
            else:
                sent_message = bot.send_message(INFO_CHAT_ID, task_message, parse_mode="Markdown")
            message_ids_in_chat[task_number] = sent_message.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")

def close_task_topic(thread_id):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Ç–µ–º—É –∑–∞–¥–∞—á–∏."""
    try:
        bot.close_forum_topic(chat_id=INFO_CHAT_ID, message_thread_id=thread_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Ç–µ–º—ã: {e}")

def create_buttons(skip_photo=False):
    """–°–æ–∑–¥–∞—ë—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤."""
    keyboard = types.InlineKeyboardMarkup()
    if skip_photo:
        skip_button = types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_photo")
        keyboard.add(skip_button)
    else:
        buttons = [
            types.InlineKeyboardButton(text="–ë–µ—Ä—É –∑–∞–¥–∞—á—É", callback_data="take"),
            types.InlineKeyboardButton(text="–ù–µ –∏–º–µ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data="no_competence"),
            types.InlineKeyboardButton(text="–ù–µ –º–æ–≥—É –≤–∑—è—Ç—å", callback_data="cant_take")
        ]
        for button in buttons:
            keyboard.add(button)  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç–æ–ª–±–∏–∫
    return keyboard

@bot.message_handler(commands=['start'])
def start_message(message):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_button = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    keyboard.add(start_button)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
def create_task(message):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏."""
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞—á–∏.")
    pending_tasks[message.chat.id] = {'topic': None, 'description': None, 'photo': None}

@bot.message_handler(content_types=['text', 'photo'])
def handle_message(message):
    global task_counter, pending_tasks, task_status

    if message.from_user.id == SENDER_USER_ID:
        if message.chat.id in pending_tasks:
            task_data = pending_tasks[message.chat.id]

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –∑–∞–¥–∞—á–∏
            if task_data['topic'] is None:
                task_data['topic'] = message.text
                bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
            if task_data['description'] is None:
                task_data['description'] = message.text
                bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ).", reply_markup=create_buttons(skip_photo=True))
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥
            if message.photo:
                task_data['photo'] = message.photo[-1].file_id

            task_status[task_counter] = {
                'topic': task_data['topic'],
                'description': task_data['description'],
                'photo': task_data.get('photo'),
                'status': {}
            }

            # –°–æ–∑–¥–∞—ë–º —Ç–µ–º—É —Ñ–æ—Ä—É–º–∞
            thread_id = create_forum_topic(task_counter, task_data['topic'][:20])  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏

            if thread_id is not None:
                task_message = (
                    f"*–ó–∞–¥–∞—á–∞ #{task_counter}*\n"
                    f"üìå {task_data['topic']}\n"
                    f"üìù {task_data['description']}\n"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
                if task_data['photo']:
                    bot.send_photo(RECEIVER_USER_ID, photo=task_data['photo'], caption=task_message, reply_markup=create_buttons())
                else:
                    bot.send_message(RECEIVER_USER_ID, task_message, reply_markup=create_buttons())

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç—Ä–µ–¥ —Ñ–æ—Ä—É–º–∞
                send_message_to_forum_thread(task_message, thread_id, photo=task_data['photo'])

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –æ–±—â–µ–º —á–∞—Ç–µ
                send_task_status_update(task_counter)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç—Ä–µ–¥–∞
                created_threads[task_counter] = thread_id

                task_counter += 1

            # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
            pending_tasks.pop(message.chat.id)

@bot.message_handler(func=lambda message: message.chat.id == INFO_CHAT_ID)
def ignore_general_chat(message):
    """–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –æ–±—â–µ–º —á–∞—Ç–µ, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–∞–º–∏."""


@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    global task_status

    if call.from_user.id == RECEIVER_USER_ID:
        try:
            full_name = get_full_name(call.from_user)
            task_number = task_counter - 1

            if call.data == "take":
                response = "–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É!"
                status = "–≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É"
            elif call.data == "no_competence":
                response = "–í—ã –Ω–µ –∏–º–µ–µ—Ç–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏."
                status = "–Ω–µ –≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É"
            elif call.data == "cant_take":
                response = "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É."
                status = "–Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É"
            elif call.data == "skip_photo":
                bot.send_message(call.message.chat.id, "–®–∞–≥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Ñ–æ—Ç–æ –ø—Ä–æ–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–∏—Ç–µ –∑–∞–¥–∞—á—É.")
                return

            bot.answer_callback_query(call.id, response)

            task_status[task_number]['status'][full_name] = status

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –æ–±—â–µ–º —á–∞—Ç–µ
            send_task_status_update(task_number)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
