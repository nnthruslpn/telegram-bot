import logging
from telebot import TeleBot, types
from config import TOKEN, SENDER_USER_ID, RECEIVER_USER_ID, INFO_CHAT_ID

bot = TeleBot(TOKEN)
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

task_counter, task_status, created_threads, message_ids_in_chat, pending_tasks = 1, {}, {}, {}, {}

def get_full_name(user): 
    return f"{user.first_name} {user.last_name}" if user.last_name else user.first_name

def create_forum_topic(task_number, short_topic): 
    try: 
        return bot.create_forum_topic(INFO_CHAT_ID, f"{task_number}. {short_topic[:20]}", icon_color=7322096).message_thread_id
    except Exception as e: 
        logger.error(f"Error creating topic: {e}")

def send_message_to_forum_thread(message, thread_id, photo=None): 
    try:
        if photo:
            bot.send_photo(INFO_CHAT_ID, photo=photo, caption=message, message_thread_id=thread_id)
        else:
            bot.send_message(INFO_CHAT_ID, text=message, message_thread_id=thread_id)
    except Exception as e: 
        logger.error(f"Error sending message to thread: {e}")

def send_task_status_update(task_number): 
    task_info = task_status[task_number]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π
    task_message = f"*–ó–∞–¥–∞—á–∞ #{task_number}*\n" \
                   f"üìå –í–∏–¥ —Ä–∞–±–æ—Ç: {task_info['work_type']}\n" \
                   f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {task_info['urgency']}\n" \
                   f"üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {task_info['what_to_do']}\n" \
                   f"üéØ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã: {task_info['goal']}\n" \
                   f"üìÑ –ü–ü –∫–ª–∏–µ–Ω—Ç–∞: {task_info['client_pp']}\n" \
                   f"‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {task_info['equipment']}\n" \
                   f"üí∞ –°—É–º–º–∞ –∏ —á–∞—Å—ã: {task_info['cost_and_hours']}\n" \
                   f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞: {task_info['contact_person']}\n" \
                   f"–°—Ç–∞—Ç—É—Å—ã:\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    task_message += "\n".join([f"{idx}. {user} ‚Äî {status}" 
                               for idx, (user, status) in enumerate(task_info['status'].items(), 1)])

    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if task_number in message_ids_in_chat:
            method = bot.edit_message_caption if task_info.get('photo') else bot.edit_message_text
            method(task_message, chat_id=INFO_CHAT_ID, message_id=message_ids_in_chat[task_number], parse_mode="Markdown")
        else:
            sent_message = bot.send_photo(INFO_CHAT_ID, photo=task_info['photo'], caption=task_message, parse_mode="Markdown") if task_info.get('photo') else bot.send_message(INFO_CHAT_ID, task_message, parse_mode="Markdown")
            message_ids_in_chat[task_number] = sent_message.message_id
    except Exception as e:
        logger.error(f"Error updating task status: {e}")

def create_buttons(skip_photo=False): 
    keyboard = types.InlineKeyboardMarkup()
    buttons = [types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥", callback_data="skip_step")] if skip_photo else [
        types.InlineKeyboardButton(text="–ë–µ—Ä—É –∑–∞–¥–∞—á—É", callback_data="take"),
        types.InlineKeyboardButton(text="–ù–µ –∏–º–µ—é –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏", callback_data="no_competence"),
        types.InlineKeyboardButton(text="–ù–µ –º–æ–≥—É –≤–∑—è—Ç—å", callback_data="cant_take")
    ]
    [keyboard.add(button) for button in buttons]
    return keyboard

@bot.message_handler(commands=['start'])
def start_message(message):
    """–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è."""
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    start_button = types.KeyboardButton("–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
    keyboard.add(start_button)
    bot.send_message(
        message.chat.id, 
        "–ü—Ä–∏–≤–µ—Ç! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.", 
        reply_markup=keyboard
    )

@bot.message_handler(func=lambda message: message.text == "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É")
def create_task(message): 
    pending_tasks[message.chat.id] = {
        'work_type': None,
        'urgency': None,
        'what_to_do': None,
        'goal': None,
        'client_pp': None,
        'equipment': None,
        'cost_and_hours': None,
        'contact_person': None,
        'photo': None
    }
    bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥ —Ä–∞–±–æ—Ç.")

@bot.message_handler(content_types=['text', 'photo'])

def handle_message(message):
    global task_counter
    if message.from_user.id == SENDER_USER_ID and message.chat.id in pending_tasks:
        task_data = pending_tasks[message.chat.id]

        if task_data['work_type'] is None:
            task_data['work_type'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Ä–æ—á–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏.")
        elif task_data['urgency'] is None:
            task_data['urgency'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å.")
        elif task_data['what_to_do'] is None:
            task_data['what_to_do'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ü–µ–ª—å —Ä–∞–±–æ—Ç—ã.")
        elif task_data['goal'] is None:
            task_data['goal'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ü–ü –∫–ª–∏–µ–Ω—Ç–∞.")
        elif task_data['client_pp'] is None:
            task_data['client_pp'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–∏ (–º–∞—Ä–∫–∞, –º–æ–¥–µ–ª—å).")
        elif task_data['equipment'] is None:
            task_data['equipment'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤.")
        elif task_data['cost_and_hours'] is None:
            task_data['cost_and_hours'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ (–§–ò–û –∏ –Ω–æ–º–µ—Ä–∞).")
        elif task_data['contact_person'] is None:
            task_data['contact_person'] = message.text
            bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∑–∞–¥–∞—á–∏ (–∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ).", reply_markup=create_buttons(skip_photo=True))
        else:
            task_data['photo'] = message.photo[-1].file_id if message.photo else None
            task_status[task_counter] = {**task_data, 'status': {}}
            thread_id = create_forum_topic(task_counter, task_data['work_type'])
            if thread_id:
                task_message = f"*–ó–∞–¥–∞—á–∞ #{task_counter}*\n" \
                               f"üìå –í–∏–¥ —Ä–∞–±–æ—Ç: {task_data['work_type']}\n" \
                               f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {task_data['urgency']}\n" \
                               f"üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {task_data['what_to_do']}\n" \
                               f"üéØ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã: {task_data['goal']}\n" \
                               f"üìÑ –ü–ü –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_pp']}\n" \
                               f"‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {task_data['equipment']}\n" \
                               f"üí∞ –°—É–º–º–∞ –∏ —á–∞—Å—ã: {task_data['cost_and_hours']}\n" \
                               f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞: {task_data['contact_person']}\n"
                bot.send_message(RECEIVER_USER_ID, task_message, reply_markup=create_buttons()) if not task_data['photo'] else bot.send_photo(RECEIVER_USER_ID, task_data['photo'], caption=task_message, reply_markup=create_buttons())
                send_message_to_forum_thread(task_message, thread_id, photo=task_data['photo'])
                send_task_status_update(task_counter)
                created_threads[task_counter] = thread_id
                task_counter += 1
            pending_tasks.pop(message.chat.id)

@bot.message_handler(func=lambda message: message.chat.id == INFO_CHAT_ID)
def ignore_general_chat(message): pass

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    global task_counter
    if call.from_user.id == RECEIVER_USER_ID or call.data == "skip_step":
        try:
            task_number = task_counter if call.data == "skip_step" else task_counter - 1
            full_name = get_full_name(call.from_user)
            if call.data == "skip_step":
                task_data = pending_tasks.get(call.message.chat.id)
                if task_data:
                    task_status[task_number] = {**task_data, 'status': {}}
                    thread_id = create_forum_topic(task_number, task_data['work_type'])
                    if thread_id:
                        task_message = f"*–ó–∞–¥–∞—á–∞ #{task_number}*\n" \
                                       f"üìå –í–∏–¥ —Ä–∞–±–æ—Ç: {task_data['work_type']}\n" \
                                       f"‚ö†Ô∏è –°—Ä–æ—á–Ω–æ—Å—Ç—å: {task_data['urgency']}\n" \
                                       f"üìù –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å: {task_data['what_to_do']}\n" \
                                       f"üéØ –¶–µ–ª—å —Ä–∞–±–æ—Ç—ã: {task_data['goal']}\n" \
                                       f"üìÑ –ü–ü –∫–ª–∏–µ–Ω—Ç–∞: {task_data['client_pp']}\n" \
                                       f"‚öôÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {task_data['equipment']}\n" \
                                       f"üí∞ –°—É–º–º–∞ –∏ —á–∞—Å—ã: {task_data['cost_and_hours']}\n" \
                                       f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –ª–∏—Ü–∞: {task_data['contact_person']}\n"
                        bot.send_message(RECEIVER_USER_ID, task_message, reply_markup=create_buttons())
                        send_message_to_forum_thread(task_message, thread_id)
                        send_task_status_update(task_number)
                        created_threads[task_number] = thread_id
                        task_counter += 1
                    pending_tasks.pop(call.message.chat.id)
                bot.answer_callback_query(call.id, "–®–∞–≥ –ø—Ä–æ–ø—É—â–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É.")
                return

            status = {"take": "–≥–æ—Ç–æ–≤ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É", "no_competence": "–Ω–µ –∏–º–µ–µ—Ç –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π", "cant_take": "–Ω–µ –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É"}.get(call.data)
            bot.answer_callback_query(call.id, f"–í—ã {status}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.")
            task_status[task_number]['status'][full_name] = status
            bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            send_task_status_update(task_number)
        except Exception as e:
            logger.error(f"Error handling callback: {e}")

if __name__ == '__main__':
    bot.polling(none_stop=True, interval=0)
